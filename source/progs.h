/*
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/

#include "pr_comp.h"			// defs shared with qcc
#include "progdefs.h"			// generated by program cdefs

typedef union eval_s
{
	string_t	string;
	float		_float;
	float		vector[3];
	func_t		function;
	int			_int;
	int			edict;
} eval_t;	

#define	MAX_ENT_LEAFS 16

typedef struct edict_s
{
	qboolean		free;
	
	link_t			area;				// linked to a division node or leaf
	
	qboolean		touchleaf;			// MH
	
	entity_state_t	baseline;

	unsigned char	alpha;				// johnfitz -- hack to support alpha since it's not part of entvars_t
	
	qboolean		sendinterval;		// johnfitz -- send time until nextthink to client for better lerp timing
	
	float			freetime;			// sv.time when the object was freed
	
	entvars_t		v;					// C exported fields from progs
	
	qboolean		suspendedinairflag;	// R00k: added (from DarkPlaces) to force ents to fall if landed on bsp objects(doors) that move out from under the ent.
	
	float			visibletime[16];	// track a visible time for each of the other players.
// other fields from progs come immediately after
} edict_t;
#define	EDICT_FROM_AREA(l) STRUCT_FROM_LINK(l,edict_t,area)
#define	GETEDICTFIELDVALUE(ed, fieldoffset) (fieldoffset ? (eval_t *)((byte *)&ed->v + fieldoffset) : NULL)

extern	int	eval_gravity, eval_items2, eval_ammo_shells1, eval_ammo_nails1;
extern	int	eval_ammo_lava_nails, eval_ammo_rockets1, eval_ammo_multi_rockets;
extern	int	eval_ammo_cells1, eval_ammo_plasma;

// nehahra specific
extern	int	eval_alpha, eval_fullbright, eval_idealpitch, eval_pitch_speed;

extern int eval_renderamt; // HalfLife support
extern int eval_rendermode; // HalfLife support

//============================================================================

extern	dprograms_t		*progs;
extern	dfunction_t		*pr_functions;
extern	char			*pr_strings;
extern	ddef_t			*pr_globaldefs;
extern	ddef_t			*pr_fielddefs;
extern	dstatement_t	*pr_statements;
extern	globalvars_t	*pr_global_struct;
extern	float			*pr_globals;		// same as pr_global_struct

extern	int	pr_edict_size;		// in bytes

//============================================================================

void PR_Init (void);

void PR_ExecuteProgram (func_t fnum);
void PR_LoadProgs (void);

void PR_Profile_f (void);

edict_t *ED_Alloc (void);
void ED_Free (edict_t *ed);

char *ED_NewString (char *string);
// returns a copy of the string allocated from the server's string heap

void ED_Print (edict_t *ed);
void ED_Write (FILE *f, edict_t *ed);
char *ED_ParseEdict (char *data, edict_t *ent);

void ED_WriteGlobals (FILE *f);
void ED_ParseGlobals (char *data);

void ED_LoadFromFile (char *data);

//define EDICT_NUM(n) ((edict_t *)(sv.edicts + (n)*pr_edict_size))
//define NUM_FOR_EDICT(e) (((byte *)(e) - sv.edicts)/pr_edict_size)

edict_t *EDICT_NUM (int n);
int NUM_FOR_EDICT (edict_t *e);

#define	NEXT_EDICT(e)	((edict_t *)((byte *)e + pr_edict_size))

#define	EDICT_TO_PROG(e) ((byte *)e - (byte *)sv.edicts)
#define PROG_TO_EDICT(e) ((edict_t *)((byte *)sv.edicts + e))

//============================================================================

#define	G_FLOAT(o)	(pr_globals[o])
#define	G_INT(o)	(*(int *)&pr_globals[o])
#define	G_EDICT(o)	((edict_t *)((byte *)sv.edicts+ *(int *)&pr_globals[o]))
#define G_EDICTNUM(o)	NUM_FOR_EDICT(G_EDICT(o))
#define	G_VECTOR(o)	(&pr_globals[o])
#define	G_STRING(o)	(pr_strings + *(string_t *)&pr_globals[o])
#define	G_FUNCTION(o)	(*(func_t *)&pr_globals[o])

#define	E_FLOAT(e,o)	(((float*)&e->v)[o])
#define	E_INT(e,o)	(*(int *)&((float*)&e->v)[o])
#define	E_VECTOR(e,o)	(&((float*)&e->v)[o])
#define	E_STRING(e,o)	(pr_strings + *(string_t *)&((float*)&e->v)[o])

extern	int		type_size[8];

typedef	void (*builtin_t) (void);
extern	builtin_t	*pr_builtins;
extern	int		pr_argc;
extern	qboolean	pr_trace;
extern	dfunction_t	*pr_xfunction;
extern	int			pr_xstatement;
extern	unsigned short	pr_crc;
void PR_RunError (char *error, ...);

void ED_PrintEdicts (void);
void ED_PrintNum (int ent);
dfunction_t *ED_FindFunction (char *name);
extern	int			pr_numbuiltins;

#ifdef EBFS
	#define	PR_GETSTRING(x) pr_strings + x
	#define PR_SETSTRING(x) x - pr_strings
	#define PR_SETTMPSTRING(x) x - pr_strings

	// 2001-09-14 Enhanced BuiltIn Function System (EBFS) by Maddes  start
	#define PR_DEFAULT_FUNCNO_BUILTIN_FIND		100
	#define PR_DEFAULT_FUNCNO_EXTENSION_FIND	99	// 2001-10-20 Extension System by Lord Havoc/Maddes

	typedef struct ebfs_builtin_s
	{
		int			default_funcno;
		char		*funcname;
		builtin_t	function;
		int			funcno;
	} ebfs_builtin_t;

	extern ebfs_builtin_t	pr_ebfs_builtins[];
	extern int				pr_ebfs_numbuiltins;

	extern cvar_t pr_builtin_find;
	extern cvar_t pr_builtin_remap;

	extern func_t	pr_func_endframe;	// 2000-01-02 EndFrame function by Maddes/FrikaC


	// 2001-10-20 Extension System by LordHavoc/Maddes  start
	extern char	*pr_extensions[];
	extern int	pr_numextensions;
	// 2001-10-20 Extension System by LordHavoc/Maddes  end

	ddef_t *ED_FindGlobal (char *name);
#endif


